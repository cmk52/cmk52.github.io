<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客说明</title>
    <url>/2020/04/23/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><ul>
<li><p>博客的一些坑</p>
</li>
<li><p>图片的显示需要安装hexo-asset-image但是得是0.0.5版本要不然显示失败</p>
</li>
<li><p>1.0.0版本在每个图片src前面都会加上/.com的前缀导致加载失败。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">npm install https:<span class="regexp">//gi</span>thub.com<span class="regexp">/CodeFalling/</span>hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>使用这个命令才能安装0.0.5版本其它命令都是安装1.0.0会显示错误</p>
</li>
</ul>
]]></content>
      <categories>
        <category>起点</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2020/04/24/Docker/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1什么是Docker"><a href="#1-1什么是Docker" class="headerlink" title="1.1什么是Docker"></a>1.1什么是Docker</h2><ul>
<li>Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker" target="_blank" rel="noopener">GitHub</a> 上进行维护。</li>
<li><img src="/2020/04/24/Docker/1-3.png" alt><a id="more"></a>
<h2 id="1-2为什么要用Docker"><a href="#1-2为什么要用Docker" class="headerlink" title="1.2为什么要用Docker"></a>1.2为什么要用Docker</h2></li>
<li>要理解这个问题需要了解目前有什么难题出现：<ul>
<li>我们安装软件的时候都是先下载好安装包然后按照步骤按照,但是这样很麻烦如果中间有一步出错那么就会安装失败,但是我们的目的不是安装而是快速搭建好环境然后使用软件</li>
</ul>
</li>
<li>Docker是如何解决这个问题的？<ul>
<li>Docker就如上面的图片一样它承载了许多货物每一个货物就是一个环境(Docker称为镜像)</li>
<li>我们只需要下载镜像然后运行就能够搭建好软件环境,省去了安装步骤。</li>
</ul>
</li>
<li>为什么Docker能解决这个问题？<ul>
<li>下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</li>
<li><img src="/2020/04/24/Docker/1-1(1).png" alt></li>
<li>总的来说就是Docker引擎让安装变的固定化了(去除了它的变量特性,变成常量的)只要是常量就能封装给他人使用。</li>
</ul>
</li>
</ul>
<h1 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2 Docker安装与启动"></a>2 Docker安装与启动</h1><h2 id="2-1安装Docker"><a href="#2-1安装Docker" class="headerlink" title="2.1安装Docker"></a>2.1安装Docker</h2><p>Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p>
<p>​    由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p>
<p>(1) yum包更新到最新</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo yum update</span></span><br></pre></td></tr></table></figure>
<p>(2) 安装需要的软件包，yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">sudo yum install -<span class="symbol">y</span> yum-utils device-mapper-<span class="symbol">persistent</span>-data lvm2</span><br></pre></td></tr></table></figure>
<p>（3）设置yum源为阿里云</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --<span class="built_in">add</span>-repo http://mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure>

<p>（4）安装docker</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> docker-ce</span><br></pre></td></tr></table></figure>

<p>（5）安装后查看docker版本</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker -v</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-设置ustc镜像"><a href="#2-2-设置ustc镜像" class="headerlink" title="2.2 设置ustc镜像"></a>2.2 设置ustc镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。<br>[<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker]" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/docker]</a><br>修改Docker的配置文件加上这个镜像地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>docker<span class="regexp">/daemon.json</span></span><br></pre></td></tr></table></figure>

<p>在该文件中输入如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-Docker的启动和停止"><a href="#2-3-Docker的启动和停止" class="headerlink" title="2.3 Docker的启动和停止"></a>2.3 Docker的启动和停止</h2><p>** systemctl**命令是系统服务管理器指令<br>启动docker：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure>

<p>停止docker：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">stop</span> docker</span><br></pre></td></tr></table></figure>

<p>重启docker：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<p>查看docker状态：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl status docker</span></span><br></pre></td></tr></table></figure>

<p>开机启动：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> docker</span><br></pre></td></tr></table></figure>

<p>查看docker概要信息</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> <span class="literal">info</span></span><br></pre></td></tr></table></figure>

<p>查看docker帮助文档</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">docker <span class="comment">--help</span></span><br></pre></td></tr></table></figure>
<h1 id="3-Docker基本命令的使用"><a href="#3-Docker基本命令的使用" class="headerlink" title="3 Docker基本命令的使用"></a>3 Docker基本命令的使用</h1><h2 id="3-1-镜像的相关命令"><a href="#3-1-镜像的相关命令" class="headerlink" title="3.1 镜像的相关命令"></a>3.1 镜像的相关命令</h2><h3 id="3-1-1"><a href="#3-1-1" class="headerlink" title="3.1.1"></a>3.1.1</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure>

<p>REPOSITORY：镜像名称</p>
<p>TAG：镜像标签</p>
<p>IMAGE ID：镜像ID</p>
<p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p>
<p>SIZE：镜像大小</p>
<p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p>
<h3 id="3-1-2-搜索镜像"><a href="#3-1-2-搜索镜像" class="headerlink" title="3.1.2 搜索镜像"></a>3.1.2 搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">search</span> 镜像名称</span><br></pre></td></tr></table></figure>

<p>NAME：仓库名称</p>
<p>DESCRIPTION：镜像描述</p>
<p>STARS：用户评价，反应一个镜像的受欢迎程度</p>
<p>OFFICIAL：是否官方</p>
<p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p>
<h3 id="3-1-3-拉取镜像"><a href="#3-1-3-拉取镜像" class="headerlink" title="3.1.3 拉取镜像"></a>3.1.3 拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull 镜像名称</span><br></pre></td></tr></table></figure>

<p>例如，我要下载centos7镜像</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker pull centos:<span class="number">7</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-4-删除镜像"><a href="#3-1-4-删除镜像" class="headerlink" title="3.1.4 删除镜像"></a>3.1.4 删除镜像</h3><p>按镜像ID删除镜像</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> rmi 镜像ID</span><br></pre></td></tr></table></figure>

<p>删除所有镜像</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">docker rmi <span class="string">`docker images -q`</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2容器的相关命令"><a href="#3-2容器的相关命令" class="headerlink" title="3.2容器的相关命令"></a>3.2容器的相关命令</h2><h3 id="3-2-1-查看容器"><a href="#3-2-1-查看容器" class="headerlink" title="3.2.1 查看容器"></a>3.2.1 查看容器</h3><p>查看正在运行的容器</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure>

<p>查看所有容器</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">docker</span> <span class="comment">ps</span> <span class="comment">–a</span></span><br></pre></td></tr></table></figure>

<p>查看最后一次运行的容器</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> ps –l</span><br></pre></td></tr></table></figure>

<p>查看停止的容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker ps -f <span class="attribute">status</span>=exited</span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-创建与启动容器"><a href="#3-2-2-创建与启动容器" class="headerlink" title="3.2.2 创建与启动容器"></a>3.2.2 创建与启动容器</h3><p>创建容器常用的参数说明：</p>
<p>创建容器命令：docker run</p>
<p> -i：表示运行容器</p>
<p> -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p>
<p> –name :为创建的容器命名。</p>
<p> -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p>
<p> -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p>
<p> -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p>
<p>（1）交互式方式创建容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -it <span class="attribute">--name</span>=容器名称 镜像名称:标签 /bin/bash</span><br></pre></td></tr></table></figure>

<p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </p>
<p>退出当前容器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<p>（2）守护式方式创建容器：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure>

<p>登录守护式容器方式：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> 容器名称 (或者容器ID)  /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="3-2-3-停止与启动容器"><a href="#3-2-3-停止与启动容器" class="headerlink" title="3.2.3 停止与启动容器"></a>3.2.3 停止与启动容器</h3><p>停止容器：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">stop</span> 容器名称（或者容器<span class="keyword">ID</span>）</span><br></pre></td></tr></table></figure>

<p>启动容器：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">start</span> 容器名称（或者容器<span class="keyword">ID</span>）</span><br></pre></td></tr></table></figure>
<h3 id="3-2-4-文件拷贝"><a href="#3-2-4-文件拷贝" class="headerlink" title="3.2.4 文件拷贝"></a>3.2.4 文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="meta">cp</span> 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure>

<p>也可以将文件从容器内拷贝出来</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="meta">cp</span> 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure>

<h3 id="3-2-5-目录挂载"><a href="#3-2-5-目录挂载" class="headerlink" title="3.2.5 目录挂载"></a>3.2.5 目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -di -v /usr/<span class="keyword">local</span>/myhtml:/usr/<span class="keyword">local</span>/myhtml <span class="comment">--name=mycentos3 centos:7</span></span><br></pre></td></tr></table></figure>

<p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p>
<p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged=true  来解决挂载的目录没有权限的问题</p>
<h3 id="3-2-6-查看容器IP地址"><a href="#3-2-6-查看容器IP地址" class="headerlink" title="3.2.6 查看容器IP地址"></a>3.2.6 查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">inspect</span> 容器名称（容器ID）</span><br></pre></td></tr></table></figure>

<p>也可以直接执行下面的命令直接输出IP地址</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker inspect --format</span>=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> 容器名称（容器ID）</span><br></pre></td></tr></table></figure>
<h3 id="3-2-7-删除容器"><a href="#3-2-7-删除容器" class="headerlink" title="3.2.7 删除容器"></a>3.2.7 删除容器</h3><p>删除指定的容器：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm 容器名称（容器ID）</span><br></pre></td></tr></table></figure>
<h1 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4 应用部署"></a>4 应用部署</h1><h2 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h2><p>（1）拉取mysql镜像</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker pull centos/mysql<span class="number">-57</span>-centos7</span><br></pre></td></tr></table></figure>

<p>（2）创建容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=tensquare_mysql -p 33306:3306 -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=123456 mysql</span><br></pre></td></tr></table></figure>

<p>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</p>
<p>-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</p>
<p>（3）远程登录mysql</p>
<p>连接宿主机的IP  ,指定端口为33306 </p>
<h2 id="4-2-tomcat部署"><a href="#4-2-tomcat部署" class="headerlink" title="4.2 tomcat部署"></a>4.2 tomcat部署</h2><p>（1）拉取镜像</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker pull tomcat:<span class="number">7</span>-jre7</span><br></pre></td></tr></table></figure>

<p>（2）创建容器</p>
<p>创建容器  -p表示地址映射</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -di <span class="comment">--name=mytomcat -p 9000:8080 </span></span><br><span class="line">-v /usr/<span class="keyword">local</span>/webapps:/usr/<span class="keyword">local</span>/tomcat/webapps tomcat:<span class="number">7</span>-jre7</span><br></pre></td></tr></table></figure>

<h2 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h2><p>（1）拉取镜像    </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker pull nginx</span></span><br></pre></td></tr></table></figure>

<p>（2）创建Nginx容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=mynginx -p 80:80 nginx</span><br></pre></td></tr></table></figure>

<h2 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h2><p>（1）拉取镜像</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker pull redis</span></span><br></pre></td></tr></table></figure>

<p>（2）创建容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure>
<h1 id="5-迁移与备份"><a href="#5-迁移与备份" class="headerlink" title="5 迁移与备份"></a>5 迁移与备份</h1><h2 id="5-1-容器保存为镜像"><a href="#5-1-容器保存为镜像" class="headerlink" title="5.1 容器保存为镜像"></a>5.1 容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker commit mynginx mynginx_i</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-镜像备份"><a href="#5-2-镜像备份" class="headerlink" title="5.2 镜像备份"></a>5.2 镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">docker</span>  <span class="selector-tag">save</span> <span class="selector-tag">-o</span> <span class="selector-tag">mynginx</span><span class="selector-class">.tar</span> <span class="selector-tag">mynginx_i</span></span><br></pre></td></tr></table></figure>

<h2 id="5-3-镜像恢复与迁移"><a href="#5-3-镜像恢复与迁移" class="headerlink" title="5.3 镜像恢复与迁移"></a>5.3 镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">load</span> <span class="selector-tag">-i</span> <span class="selector-tag">mynginx</span><span class="selector-class">.tar</span></span><br></pre></td></tr></table></figure>

<p>-i 输入的文件</p>
<p>执行后再次查看镜像，可以看到镜像已经恢复</p>
<h1 id="6-Dockerfile"><a href="#6-Dockerfile" class="headerlink" title="6 Dockerfile"></a>6 Dockerfile</h1><h2 id="6-1-什么是Dockerfile"><a href="#6-1-什么是Dockerfile" class="headerlink" title="6.1 什么是Dockerfile"></a>6.1 什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p>
<p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p>
<h2 id="6-2-常用命令"><a href="#6-2-常用命令" class="headerlink" title="6.2 常用命令"></a>6.2 常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>FROM image_name:tag</td>
<td>定义了使用哪个基础镜像启动构建流程 没有回去自动下载</td>
</tr>
<tr>
<td>MAINTAINER user_name</td>
<td>声明镜像的创建者</td>
</tr>
<tr>
<td>ENV key value</td>
<td>设置环境变量 (可以写多条)</td>
</tr>
<tr>
<td>RUN command</td>
<td>是Dockerfile的核心部分(可以写多条)</td>
</tr>
<tr>
<td>ADD source_dir/file dest_dir/file</td>
<td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td>
</tr>
<tr>
<td>COPY source_dir/file dest_dir/file</td>
<td>和ADD相似，但是如果有压缩文件并不能解压</td>
</tr>
<tr>
<td>WORKDIR path_dir</td>
<td>设置工作目录</td>
</tr>
</tbody></table>
<h2 id="6-3-使用脚本创建镜像"><a href="#6-3-使用脚本创建镜像" class="headerlink" title="6.3 使用脚本创建镜像"></a>6.3 使用脚本创建镜像</h2><p>步骤：</p>
<p>（1）创建目录</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> –p /usr/<span class="built_in">local</span>/dockerjdk8</span><br></pre></td></tr></table></figure>

<p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p>
<p>（3）创建文件Dockerfile  <code>vi Dockerfile</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#依赖镜像名称和ID</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment">#指定镜像创建者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> ITCAST</span><br><span class="line"><span class="comment">#切换工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir  /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"><span class="comment">#ADD 是相对路径jar,把java添加到容器中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u171-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>（4）执行命令构建镜像</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker build -t</span>=<span class="string">'jdk1.8'</span> .</span><br></pre></td></tr></table></figure>

<p>注意后边的空格和点，不要省略</p>
<p>（5）查看镜像是否建立完成</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure>
<h1 id="7-Docker私有仓库"><a href="#7-Docker私有仓库" class="headerlink" title="7 Docker私有仓库"></a>7 Docker私有仓库</h1><h2 id="7-1-私有仓库搭建与配置"><a href="#7-1-私有仓库搭建与配置" class="headerlink" title="7.1 私有仓库搭建与配置"></a>7.1 私有仓库搭建与配置</h2><p>（1）拉取私有仓库镜像（此步省略）</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker pull registry</span></span><br></pre></td></tr></table></figure>

<p>（2）启动私有仓库容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure>

<p>（3）打开浏览器 输入地址<a href="http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`" target="_blank" rel="noopener">http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`</a> 表示私有仓库搭建成功并且内容为空</p>
<p>（4）修改daemon.json</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>docker<span class="regexp">/daemon.json</span></span><br></pre></td></tr></table></figure>

<p>添加以下内容，保存退出。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"insecure-registries"</span>:[<span class="string">"搭建私服服务器ip:5000"</span>]&#125;</span><br></pre></td></tr></table></figure>

<p>此步用于让 docker信任私有仓库地址</p>
<p>（5）重启docker 服务</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure>
<h2 id="7-2-镜像上传至私有仓库"><a href="#7-2-镜像上传至私有仓库" class="headerlink" title="7.2 镜像上传至私有仓库"></a>7.2 镜像上传至私有仓库</h2><p>（1）标记镜像为私有仓库的镜像</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker tag jdk1<span class="number">.8</span> <span class="number">192.168</span><span class="number">.184</span><span class="number">.141</span>:<span class="number">5000</span>/jdk1<span class="number">.8</span></span><br></pre></td></tr></table></figure>

<p>（2）再次启动私服容器</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="literal">start</span> registry</span><br></pre></td></tr></table></figure>

<p>（3）上传标记的镜像和拉取私服镜像</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker push <span class="number">192.168</span><span class="number">.184</span><span class="number">.141</span>:<span class="number">5000</span>/jdk1<span class="number">.8</span></span><br><span class="line">docker pull <span class="number">192.168</span><span class="number">.184</span><span class="number">.141</span>:<span class="number">5000</span>/jdk1<span class="number">.8</span>(前提是在需要拉取的服务器docker中加入私服ip地址 vi /etc/docker/daemon.json加入地址)</span><br></pre></td></tr></table></figure>
<h2 id="7-3-部署微服务"><a href="#7-3-部署微服务" class="headerlink" title="7.3 部署微服务"></a>7.3 部署微服务</h2><ul>
<li><p>部署方式有两种</p>
</li>
<li><p>第一种是打成jar包发送到服务器然后书写dockerfile然后根据它们两个 执行build来生成镜像</p>
 <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker build -t</span>=<span class="string">'镜像名'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意的是dockerfile的基础镜像需要安装了jdk1.8的centos镜像</li>
<li>使用maven打包springboot必须有springboot-maven插件如果没有也可以打包但是生成的jar包无法使用 java -jar运行。</li>
</ul>
</li>
<li><p>第二种就是idea集成docker来部署(推荐使用因为每次上传jar这种方式无疑是麻烦的)</p>
<ul>
<li>开启docker服务器的远程连接<br>首先需要docker-maven插件加入配置信息(镜像名什么的服务器名),因为使用的是java11,在此之后的版本失去了activity内置在jdk里面的包所以要加坐标依赖,在src下建docker文件夹写dockerfile文件,这样就能远程连接生成镜像了。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis的基本使用</title>
    <url>/2020/04/25/Mybatis/</url>
    <content><![CDATA[<h1 id="1-Mybatis的基本使用"><a href="#1-Mybatis的基本使用" class="headerlink" title="1 Mybatis的基本使用"></a>1 Mybatis的基本使用</h1><h2 id="1-1Mybatis解决的问题"><a href="#1-1Mybatis解决的问题" class="headerlink" title="1.1Mybatis解决的问题"></a>1.1Mybatis解决的问题</h2><h3 id="1-1-1-使用jdbc存在的问题"><a href="#1-1-1-使用jdbc存在的问题" class="headerlink" title="1.1.1 使用jdbc存在的问题"></a>1.1.1 使用jdbc存在的问题</h3><p>1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库连接池可解决此问题。<br>2、Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java代码。<br>3、使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能多也可能少，修改 sql 还要修改代码，系统不易维护。<br>4、对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成 pojo 对象解析比较方便。</p>
<a id="more"></a>

<h3 id="1-1-2-Mybatis是如何解决这个问题的"><a href="#1-1-2-Mybatis是如何解决这个问题的" class="headerlink" title="1.1.2 Mybatis是如何解决这个问题的"></a>1.1.2 Mybatis是如何解决这个问题的</h3><ul>
<li>mybatis 是一个优秀的基于 java 的持久层框架，它内部封装了 jdbc，使开发者只需要关注 sql 语句本身，</li>
<li>而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。<br>mybatis 通过 xml 或注解的方式将要执行的各种 statement 配置起来，并通过 java 对象和 statement 中</li>
<li>sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java 对象并返回。</li>
<li>采用 ORM 思想解决了实体和数据库映射的问题，对 jdbc 进行了封装，屏蔽了 jdbc api 底层访问细节，使我们不用与 jdbc api 打交道，就可以完成对数据库的持久化操作。<h2 id="1-2Mybatis使用步骤"><a href="#1-2Mybatis使用步骤" class="headerlink" title="1.2Mybatis使用步骤"></a>1.2Mybatis使用步骤</h2>(1) 创建maven工程添加坐标依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
(2) 在src/main/java建立domain包在包下建立实体类<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Title: User</span></span><br><span class="line"><span class="comment">* Description: 用户的实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Serializable</span></span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> sex;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
(3) 在src/main/java下建dao包编写dao接口<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IUserDao&#123;</span><br><span class="line">    List&lt;User&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
(4) 在src/main/resource建dao包写dao.xml文件</li>
</ul>
<p><strong>注意事项<br>在maven中创建的项目目录结构<br><img src="/2020/04/25/Mybatis/1587776860586.png" alt="1587776860586"><br>最终会编译成<br><img src="/2020/04/25/Mybatis/1587776847990.png" alt="1587776847990"><br>可以看到java目录和resource下的目录是共通的。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.domain.User"</span>&gt;</span></span><br><span class="line">		select * from user</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(5) 编写SqlMapConfig.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置 mybatis 的环境 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置 mysql 的环境 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 配置连接数据库的信息：用的是数据源(连接池) --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> 		 <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ee50"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!-- 告知 mybatis 映射配置的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/itheima/dao/IUserDao.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(6) 编写测试类完成测试</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Title: MybatisTest&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Description: 测试 mybatis 的环境&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public <span class="keyword">class</span> MybatisTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String<span class="literal">[]</span> args)throws Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.读取配置文件</span></span><br><span class="line">InputStream <span class="keyword">in</span> = <span class="module-access"><span class="module"><span class="identifier">Resources</span>.</span></span>get<span class="constructor">ResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>)</span>;</span><br><span class="line"><span class="comment">//2.创建 SqlSessionFactory 的构建者对象</span></span><br><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> <span class="constructor">SqlSessionFactoryBuilder()</span>;</span><br><span class="line"><span class="comment">//3.使用构建者创建工厂对象 SqlSessionFactory</span></span><br><span class="line">SqlSessionFactory factory = builder.build(<span class="keyword">in</span>);</span><br><span class="line"><span class="comment">//4.使用 SqlSessionFactory 生产 SqlSession 对象</span></span><br><span class="line">SqlSession session = factory.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line"><span class="comment">//5.使用 SqlSession 创建 dao 接口的代理对象</span></span><br><span class="line">IUserDao userDao = session.get<span class="constructor">Mapper(IUserDao.<span class="params">class</span>)</span>;</span><br><span class="line"><span class="comment">//6.使用代理对象执行查询所有方法</span></span><br><span class="line">List&lt;User&gt; users = userDao.find<span class="constructor">All()</span>;</span><br><span class="line">for(User user : users) &#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//7.释放资源</span></span><br><span class="line">session.close<span class="literal">()</span>;</span><br><span class="line"><span class="keyword">in</span>.close<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Mybatis基本使用已经完成了</p>
<h1 id="2-Mybatis基于注解的使用"><a href="#2-Mybatis基于注解的使用" class="headerlink" title="2 Mybatis基于注解的使用"></a>2 Mybatis基于注解的使用</h1><p>(1) 在接口的方法上加注解</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="keyword">List</span>&lt;<span class="keyword">User</span>&gt; findAll();</span><br></pre></td></tr></table></figure>
<p>(2) 修改SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知 mybatis 映射配置的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.IUserDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(3) 注意事项<br>在使用基于注解的 Mybatis 配置时，请移除 xml 的映射配置（IUserDao.xml）。<br>因为会产生冲突。<br>我们得出结论 使用xml方式甚至不用写dao接口类,只需要书写xml把sql需要的信息都备好在通过session.select()方法就能完成操作,但是一般不这么做因为为了整合spring需要生成代理对象放到spring容器。</p>
<h1 id="3-Mybatis原理分析-难点"><a href="#3-Mybatis原理分析-难点" class="headerlink" title="3 Mybatis原理分析(难点)"></a>3 Mybatis原理分析(难点)</h1><h2 id="3-1涉及知识点"><a href="#3-1涉及知识点" class="headerlink" title="3.1涉及知识点"></a>3.1涉及知识点</h2><p>涉及到的一些知识点：工厂模式<br>（Factory 工厂模式）、构造者模式（Builder 模式）、代理模式，反射，自定义注解，注解的反射，xml 解析，<br>数据库元数据，元数据的反射等。<br><img src="/2020/04/25/Mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E5%88%86%E6%9E%90.png" alt><br>过程过于复杂以后在论述</p>
<h1 id="4-xml中sql配置详解"><a href="#4-xml中sql配置详解" class="headerlink" title="4 xml中sql配置详解"></a>4 xml中sql配置详解</h1><h2 id="4-1-在持久层添加findById方法-查询所有"><a href="#4-1-在持久层添加findById方法-查询所有" class="headerlink" title="4.1 在持久层添加findById方法  查询所有"></a>4.1 在持久层添加findById方法  查询所有</h2><p><strong>一个xml对应一个dao接口</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">/*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> 根据 id 查询</span><br><span class="line"><span class="bullet">* </span>@param userId</span><br><span class="line"><span class="bullet">* </span>@return</span><br><span class="line"><span class="strong">*/</span></span><br><span class="line"><span class="strong">User findById(Integer userId);</span></span><br></pre></td></tr></table></figure>
<h2 id="4-1-1-在xml中配置该方法"><a href="#4-1-1-在xml中配置该方法" class="headerlink" title="4.1.1 在xml中配置该方法"></a>4.1.1 在xml中配置该方法</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 根据 id 查询 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.domain.User"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span></span><br><span class="line"><span class="xml">select * from user where id = #</span><span class="template-variable">&#123;uid&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">细节：</span></span><br><span class="line"><span class="xml">resultType 属性：</span></span><br><span class="line"><span class="xml">	用于指定结果集的类型。</span></span><br><span class="line"><span class="xml">parameterType 属性：</span></span><br><span class="line"><span class="xml">	用于指定传入参数的类型。</span></span><br><span class="line"><span class="xml">sql 语句中使用#</span><span class="template-variable">&#123;&#125;</span><span class="xml">字符：</span></span><br><span class="line"><span class="xml">	它代表占位符，相当于原来 jdbc 部分所学的?，都是用于执行语句时替换实际的数据。</span></span><br><span class="line"><span class="xml">	具体的数据是由#</span><span class="template-variable">&#123;&#125;</span><span class="xml">里面的内容决定的。</span></span><br><span class="line"><span class="xml">#</span><span class="template-variable">&#123;&#125;</span><span class="xml">中内容的写法：</span></span><br><span class="line"><span class="xml">	由于数据类型是基本类型，所以此处可以随意写。</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-在持久层接口中添加新增方法-增"><a href="#4-2-在持久层接口中添加新增方法-增" class="headerlink" title="4.2  在持久层接口中添加新增方法  增"></a>4.2  在持久层接口中添加新增方法  增</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 保存用户</span><br><span class="line">* @param user</span><br><span class="line">* @return 影响数据库记录的行数</span><br><span class="line">*/</span><br><span class="line">int saveUser(<span class="keyword">User</span> <span class="title">user</span>);</span><br></pre></td></tr></table></figure>
<h3 id="4-2-1-xml配置"><a href="#4-2-1-xml配置" class="headerlink" title="4.2.1 xml配置"></a>4.2.1 xml配置</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 保存用户--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.itheima.domain.User"</span>&gt;</span></span></span><br><span class="line"><span class="xml">insert into user(username,birthday,sex,address)</span></span><br><span class="line"><span class="xml">values(#</span><span class="template-variable">&#123;username&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;birthday&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;sex&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;address&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml">细节：</span></span><br><span class="line"><span class="xml">parameterType 属性：</span></span><br><span class="line"><span class="xml">	代表参数的类型，因为我们要传入的是一个类的对象，所以类型就写类的全名称。</span></span><br><span class="line"><span class="xml">	sql 语句中使用#</span><span class="template-variable">&#123;&#125;</span><span class="xml">字符：</span></span><br><span class="line"><span class="xml">	它代表占位符，相当于原来 jdbc 部分所学的?，都是用于执行语句时替换实际的数据。</span></span><br><span class="line"><span class="xml">	具体的数据是由#</span><span class="template-variable">&#123;&#125;</span><span class="xml">里面的内容决定的。</span></span><br><span class="line"><span class="xml">#</span><span class="template-variable">&#123;&#125;</span><span class="xml">中内容的写法：</span></span><br><span class="line"><span class="xml">	由于我们保存方法的参数是 一个 User 对象，此处要写 User 对象中的属性名称。</span></span><br><span class="line"><span class="xml">	它用的是 ognl 表达式。</span></span><br><span class="line"><span class="xml">	ognl 表达式：</span></span><br><span class="line"><span class="xml">	它是 apache 提供的一种表达式语言，全称是：</span></span><br><span class="line"><span class="xml">	Object Graphic Navigation Language 对象图导航语言</span></span><br><span class="line"><span class="xml">	它是按照一定的语法格式来获取数据的。</span></span><br><span class="line"><span class="xml">	语法格式就是使用 #</span><span class="template-variable">&#123;对象.对象&#125;</span><span class="xml">的方式</span></span><br><span class="line"><span class="xml">#</span><span class="template-variable">&#123;user.username&#125;</span><span class="xml">它会先去找 user 对象，然后在 user 对象中找到 username 属性，并调用</span></span><br><span class="line"><span class="xml">getUsername()方法把值取出来。但是我们在 parameterType 属性上指定了实体类名称，所以可以省略 user.</span></span><br><span class="line"><span class="xml">而直接写 username</span></span><br></pre></td></tr></table></figure>
<h2 id="4-3-新增用户-id-的返回值-xml配置"><a href="#4-3-新增用户-id-的返回值-xml配置" class="headerlink" title="4.3 新增用户 id 的返回值 xml配置"></a>4.3 新增用户 id 的返回值 xml配置</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">新增用户后，同时还要返回当前新增用户的 id 值，因为 id 是由数据库的自动增长来实现的，所以就相</span></span><br><span class="line"><span class="xml">当于我们要在新增后将自动增长 auto_increment 的值返回。</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"USER"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置保存时获取插入的 id --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span></span><br><span class="line"><span class="xml">select last_insert_id();</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span></span><br><span class="line"><span class="xml">insert into user(username,birthday,sex,address)</span></span><br><span class="line"><span class="xml">values(#</span><span class="template-variable">&#123;username&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;birthday&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;sex&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;address&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="4-4-在持久层接口中添加更新方法-改"><a href="#4-4-在持久层接口中添加更新方法-改" class="headerlink" title="4.4  在持久层接口中添加更新方法  改"></a>4.4  在持久层接口中添加更新方法  改</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 更新用户</span><br><span class="line">* @param user</span><br><span class="line">* @return 影响数据库记录的行数</span><br><span class="line">*/</span><br><span class="line">int updateUser(<span class="keyword">User</span> <span class="title">user</span>);</span><br></pre></td></tr></table></figure>
<h3 id="4-4-1-在用户的映射配置文件中配置"><a href="#4-4-1-在用户的映射配置文件中配置" class="headerlink" title="4.4.1 在用户的映射配置文件中配置"></a>4.4.1 在用户的映射配置文件中配置</h3><!-- 更新用户 -->
<update id="updateUser" parametertype="com.itheima.domain.User">
update user set username=#{username},birthday=#{birthday},sex=#{sex},
address=#{address} where id=#{id}
</update>

<h2 id="4-5-在持久层接口中添加删除方法"><a href="#4-5-在持久层接口中添加删除方法" class="headerlink" title="4.5  在持久层接口中添加删除方法"></a>4.5  在持久层接口中添加删除方法</h2><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">/*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> 根据 id 删除用户</span><br><span class="line"><span class="bullet">* </span>@param userId</span><br><span class="line"><span class="bullet">* </span>@return</span><br><span class="line"><span class="strong">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="4-5-1-在用户的映射配置文件中配置"><a href="#4-5-1-在用户的映射配置文件中配置" class="headerlink" title="4.5.1 在用户的映射配置文件中配置"></a>4.5.1 在用户的映射配置文件中配置</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 删除用户 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">delete from user where id = #</span><span class="template-variable">&#123;uid&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="4-6-在持久层接口中添加模糊查询方法"><a href="#4-6-在持久层接口中添加模糊查询方法" class="headerlink" title="4.6 在持久层接口中添加模糊查询方法"></a>4.6 在持久层接口中添加模糊查询方法</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>根据名称模糊查询</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@param username</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line"><span class="built_in">List</span>&lt;User&gt; findByName(<span class="built_in">String</span> username);</span><br></pre></td></tr></table></figure>
<h3 id="4-6-1-在用户的映射配置文件中配置"><a href="#4-6-1-在用户的映射配置文件中配置" class="headerlink" title="4.6.1  在用户的映射配置文件中配置"></a>4.6.1  在用户的映射配置文件中配置</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;!-- 根据名称模糊查询 --&gt;</span><br><span class="line">&lt;select <span class="attribute">id</span>=<span class="string">"findByName"</span> <span class="attribute">resultType</span>=<span class="string">"com.itheima.domain.User"</span> <span class="attribute">parameterType</span>=<span class="string">"String"</span>&gt;</span><br><span class="line"> select * <span class="keyword">from</span><span class="built_in"> user </span>where username like #&#123;username&#125;</span><br><span class="line"> </span><br><span class="line"> 我们在配置文件中没有加入%来作为模糊查询的条件，所以在传入字符串实参时，就需要给定模糊查询的标识%。配置文件中的#&#123;username&#125;也只是一个占位符，所以 SQL 语句显示为“?”。</span><br></pre></td></tr></table></figure>
<h3 id="4-6-2-模糊查询的另一种配置方式"><a href="#4-6-2-模糊查询的另一种配置方式" class="headerlink" title="4.6.2 模糊查询的另一种配置方式"></a>4.6.2 模糊查询的另一种配置方式</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">第一步：修改 SQL 语句的配置，配置如下：</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.domain.User"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> select * from user where username like '%$</span><span class="template-variable">&#123;value&#125;</span><span class="xml">%'</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">我们在上面将原来的#</span><span class="template-variable">&#123;&#125;</span><span class="xml">占位符，改成了$</span><span class="template-variable">&#123;value&#125;</span><span class="xml">。注意如果用模糊查询的这种写法，那么$</span><span class="template-variable">&#123;value&#125;</span><span class="xml">的写法就是固定的，不能写成其它名字。</span></span><br></pre></td></tr></table></figure>
<h2 id="4-7-与-的区别"><a href="#4-7-与-的区别" class="headerlink" title="4.7 #{}与${}的区别"></a>4.7 #{}与${}的区别</h2><p>#{}表示一个占位符号<br>通过#{}可以实现 preparedStatement 向占位符中设置值，自动进行 java 类型和 jdbc 类型转换，<br>#{}可以有效防止 sql 注入。 #{}可以接收简单类型值或 pojo 属性值。 如果 parameterType 传输单个简单类<br>型值，#{}括号中可以是 value 或其它名称。<br>${}表示拼接 sql 串<br>通过${}可以将 parameterType 传入的内容拼接在 sql 中且不进行 jdbc 类型转换， ${}可以接收简<br>单类型值或 pojo 属性值，如果 parameterType 传输单个简单类型值，${}括号中只能是 value。</p>
<ul>
<li>上述完成了基本的增删改查的演示</li>
<li>总结:</li>
<li>通过测试我们针对特殊的情况做出总结,查询:如果查询不到结果不是返回null或者””而是抛异常。</li>
<li>增加数据,如果传的实体类对象属性有null也会插入,但是如果该字段设计不能为null同样抛异常。</li>
<li>修改数据,如果有属性为null,修改也能成功把数据库数据变成null,但是但是如果该字段设计不能为null同样抛异常。</li>
<li>删除,没有这个用户删除抛异常</li>
<li>后面讲的myabtis插件 通用mapper与上述结论会有所不同。</li>
</ul>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis高级运用2</title>
    <url>/2020/04/25/Mybatis%E9%AB%98%E7%BA%A7%E8%BF%90%E7%94%A82/</url>
    <content><![CDATA[<h1 id="Mybatis高级运用2"><a href="#Mybatis高级运用2" class="headerlink" title="Mybatis高级运用2"></a>Mybatis高级运用2</h1><h2 id="1-Mybatis-多表查询之一对多"><a href="#1-Mybatis-多表查询之一对多" class="headerlink" title="1  Mybatis 多表查询之一对多"></a>1  Mybatis 多表查询之一对多</h2><h3 id="1-1-一对一查询-多对一"><a href="#1-1-一对一查询-多对一" class="headerlink" title="1.1 一对一查询(多对一)"></a>1.1 一对一查询(多对一)</h3><p>需求<br>查询所有账户信息，关联查询下单用户信息。<br>注意：<br>因为一个账户信息只能供某个用户使用，所以从查询账户信息出发关联查询用户信息为一对一查询。如果从用户信息出发查询用户下的账户信息则为一对多查询，因为一个用户可以有多个账户。</p>
<a id="more"></a>
<h4 id="1-1-1-方案1"><a href="#1-1-1-方案1" class="headerlink" title="1.1.1 方案1"></a>1.1.1 方案1</h4><p>(1) 定义账户信息的实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Title: Account</span></span><br><span class="line"><span class="comment">* Description: 账户的实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> Integer uid;</span><br><span class="line"><span class="keyword">private</span> Double money;</span><br></pre></td></tr></table></figure>
<p>(2) 编写 Sql 语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> account.*,</span><br><span class="line"> user.username,</span><br><span class="line"> user.address</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> <span class="keyword">account</span>,</span><br><span class="line"> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> account.uid = user.id</span><br></pre></td></tr></table></figure>

<p>(3)  定义 AccountUser 类<br>为了能够封装上面 SQL 语句的查询结果，定义 AccountCustomer 类中要包含账户信息同时还要包含用户信息，所以我们要在定义 AccountUser 类时可以继承 User 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Title: AccountUser</span></span><br><span class="line"><span class="comment">* Description: 它是 account 的子类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountUser</span> <span class="keyword">extends</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br></pre></td></tr></table></figure>
<p>(4) 定义账户的持久层 Dao 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Title: IAccountDao&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Description: 账户的持久层接口&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有账户，同时获取账户的所属用户名称以及它的地址信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;AccountUser&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>(5) 定义 AccountDao.xml 文件中的查询配置信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IAccountDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置查询所有操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"accountuser"</span>&gt;</span></span><br><span class="line">select a.*,u.username,u.address from account a,user u where a.uid =u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：因为上面查询的结果中包含了账户信息同时还包含了用户信息，所以我们的返回值类型 returnType<br>的值设置为 AccountUser 类型，这样就可以接收账户信息和用户信息了。</p>
<h4 id="1-1-2-方案2"><a href="#1-1-2-方案2" class="headerlink" title="1.1.2 方案2"></a>1.1.2 方案2</h4><p>使用 resultMap，定义专门的 resultMap 用于映射一对一查询结果。<br>通过面向对象的(has a)关系可以得知，我们可以在 Account 类中加入一个 User 类的对象来代表这个账户是哪个用户的<br>(1) 修改 Account 类<br>在 Account 类中加入 User 类的对象作为 Account 类的一个属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Title: Account</span></span><br><span class="line"><span class="comment">* Description: 账户的实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> Integer uid;</span><br><span class="line"><span class="keyword">private</span> Double money;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure>
<p>(2) 修改 AccountDao 接口中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Title: IAccountDao</span></span><br><span class="line"><span class="comment">* Description: 账户的持久层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有账户，同时获取账户的所属用户名称以及它的地址信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">注意：第二种方式，将返回值改 为了 Account 类型。</span><br><span class="line">因为 Account 类中包含了一个 User 类的对象，它可以封装账户所对应的用户信息。</span><br></pre></td></tr></table></figure>
<p>(3)  重新定义 AccountDao.xml 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IAccountDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立对应关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"account"</span> <span class="attr">id</span>=<span class="string">"accountMap"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 它是用于指定从表方的引用实体属性的 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountMap"</span>&gt;</span></span><br><span class="line">select u.*,a.id as aid,a.uid,a.money from account a,user u where a.uid =u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-一对多查询"><a href="#1-2-一对多查询" class="headerlink" title="1.2 一对多查询"></a>1.2 一对多查询</h3><p>(1) 需求：<br>查询所有用户信息及用户关联的账户信息。<br>分析：<br>用户信息和他的账户信息为一对多关系，并且查询过程中如果用户没有账户信息，此时也要将用户信息查询出来，我们想到了左外连接查询比较合适。<br>(2) 编写 SQL 语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">u.*, acc.id <span class="keyword">id</span>,</span><br><span class="line">acc.uid,</span><br><span class="line"> acc.money</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">user</span> u</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">account</span> <span class="keyword">acc</span> <span class="keyword">ON</span> u.id = acc.uid</span><br></pre></td></tr></table></figure>
<p>(3) User 类加入 List<code>&lt;Account&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Title: User</span></span><br><span class="line"><span class="comment">* Description: 用户的实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"><span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br></pre></td></tr></table></figure>
<p>(4) 用户持久层 Dao 接口中加入查询方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户，同时获取出每个用户下的所有账户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>(5) 用户持久层 Dao 映射文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- collection 是用于建立一对多中集合属性的对应关系</span></span><br><span class="line"><span class="comment">ofType 用于指定集合元素的数据类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">select u.*,a.id as aid ,a.uid,a.money from user u left outer join account</span><br><span class="line">a on u.id =a.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>collection<br>部分定义了用户关联的账户信息。表示关联查询结果集<br>property=”accList”：<br>关联查询的结果集存储在 User 对象的上哪个属性。<br>ofType=”account”：<br>指定关联查询的结果集中的对象类型即List中的对象类型。此处可以使用别名，也可以使用全限定名。</p>
<h2 id="2-Mybatis-多表查询之多对多"><a href="#2-Mybatis-多表查询之多对多" class="headerlink" title="2 Mybatis 多表查询之多对多"></a>2 Mybatis 多表查询之多对多</h2><h3 id="2-1-多对多查询"><a href="#2-1-多对多查询" class="headerlink" title="2.1 多对多查询"></a>2.1 多对多查询</h3><p>(1) 需求：<br>实现查询所有对象并且加载它所分配的用户信息。<br>分析：<br>查询角色我们需要用到Role表，但角色分配的用户的信息我们并不能直接找到用户信息，而是要通过中间表(USER_ROLE 表)才能关联到用户信息。<br>(2) Sql语句书写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> r.*,u.id uid,</span><br><span class="line"> u.username username,</span><br><span class="line"> u.birthday birthday,</span><br><span class="line"> u.sex sex,</span><br><span class="line"> u.address address</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> <span class="keyword">ROLE</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line"> USER_ROLE ur</span><br><span class="line"><span class="keyword">ON</span> ( r.id = ur.rid)</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line"> <span class="keyword">USER</span> u</span><br><span class="line"><span class="keyword">ON</span> (ur.uid = u.id);</span><br></pre></td></tr></table></figure>
<p>(3) 编写角色实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> Integer roleId;</span><br><span class="line"> <span class="keyword">private</span> String roleName;</span><br><span class="line"> <span class="keyword">private</span> String roleDesc;</span><br><span class="line"> <span class="comment">//多对多的关系映射：一个角色可以赋予多个用户</span></span><br><span class="line"> <span class="keyword">private</span> List&lt;User&gt; users;</span><br></pre></td></tr></table></figure>
<p>(4) 编写 Role 持久层接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRoleDao</span> </span>&#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function">List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(5) 编写映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IRoleDao"</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!--定义 role 表的 ResultMap--&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"roleMap"</span> <span class="attr">type</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"rid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span> <span class="attr">column</span>=<span class="string">"role_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">ofType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"roleMap"</span>&gt;</span></span><br><span class="line"> select u.*,r.id as rid,r.role_name,r.role_desc from role r</span><br><span class="line"> left outer join user_role ur on r.id = ur.rid</span><br><span class="line"> left outer join user u on u.id = ur.uid</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Mybatis-延迟加载策略"><a href="#3-Mybatis-延迟加载策略" class="headerlink" title="3 Mybatis 延迟加载策略"></a>3 Mybatis 延迟加载策略</h2><ul>
<li>通过前面的学习，我们已经掌握了 Mybatis 中一对一，一对多，多对多关系的配置及实现，可以实现对象的关联查询。实际开发过程中很多时候我们并不需要总是在加载用户信息时就一定要加载他的账户信息。此时就是我们所说的延迟加载。<h3 id="3-1-定义延迟加载"><a href="#3-1-定义延迟加载" class="headerlink" title="3.1 定义延迟加载"></a>3.1 定义延迟加载</h3></li>
<li>延迟加载:</li>
<li>就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.<br>好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。<br>坏处：<br>因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降。<h3 id="3-2-实现延迟加载"><a href="#3-2-实现延迟加载" class="headerlink" title="3.2 实现延迟加载"></a>3.2 实现延迟加载</h3><h4 id="3-2-1-使用-association-实现延迟加载"><a href="#3-2-1-使用-association-实现延迟加载" class="headerlink" title="3.2.1 使用 association 实现延迟加载"></a>3.2.1 使用 association 实现延迟加载</h4>(1) 需求：<br>查询账户(Account)信息并且关联查询用户(User)信息。如果先查询账户(Account)信息即可满足要<br>求，当我们需要查询用户(User)信息时再查询用户(User)信息。把对用户(User)信息的按需去查询就是延迟加载。<br>mybatis第三天实现多表操作时，我们使用了resultMap来实现一对一，一对多，多对多关系的操作。主要是通过 association、collection 实现一对一及一对多映射。association、collection 具备延迟加载功能。<br>(2)  账户的持久层 DAO 接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Title: IAccountDao</span></span><br><span class="line"><span class="comment">* Description: 账户的持久层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有账户，同时获取账户的所属用户名称以及它的地址信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
(3) 账户的持久层映射文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IAccountDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立对应关系 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"account"</span> <span class="attr">id</span>=<span class="string">"accountMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 它是用于指定从表方的引用实体属性的 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">select</span>=<span class="string">"com.itheima.dao.IUserDao.findById"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountMap"</span>&gt;</span></span><br><span class="line">select * from account</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
select： 填写我们要调用的 select 映射的 id<br>column ： 填写我们要传递给 select 映射的参数</li>
</ul>
<p>(4) 我们需要在 Mybatis 的配置文件 SqlMapConfig.xml 文件中添加延迟加载的配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启延迟加载的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-使用-Collection-实现延迟加载"><a href="#3-2-2-使用-Collection-实现延迟加载" class="headerlink" title="3.2.2 使用 Collection 实现延迟加载"></a>3.2.2 使用 Collection 实现延迟加载</h4><p>(1) 同样我们也可以在一对多关系配置的<code>&lt;collection&gt;</code>结点中配置延迟加载策略。<br><code>&lt;collection&gt;</code>结点中也有 select 属性，column 属性。<br>需求：<br>完成加载用户对象时，查询该用户所拥有的账户信息。<br>(2)  在 User 实体类中加入 List<code>&lt;Account&gt;</code>属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Title: User&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Description: 用户的实体类&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"><span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(3) 编写用户和账户持久层接口的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户，同时获取出每个用户下的所有账户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户 id 查询账户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure>
<p>(4) 编写用户持久层映射配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- collection 是用于建立一对多中集合属性的对应关系</span></span><br><span class="line"><span class="comment">	ofType 用于指定集合元素的数据类型</span></span><br><span class="line"><span class="comment">	select 是用于指定查询账户的唯一标识（账户的 dao 全限定类名加上方法名称）</span></span><br><span class="line"><span class="comment">	column 是用于指定使用哪个字段的值作为条件查询</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">select</span>=<span class="string">"com.itheima.dao.IAccountDao.findByUid"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span>&gt;</span>标签：</span><br><span class="line">主要用于加载关联的集合对象</span><br><span class="line">select 属性：</span><br><span class="line">用于指定查询 account 列表的 sql 语句，所以填写的是该 sql 映射的 id</span><br><span class="line">column 属性：</span><br><span class="line">用于指定 select 属性的 sql 语句的参数来源，上面的参数来自于 user 的 id 列，所以就写成 id 这一个字段名了</span><br></pre></td></tr></table></figure>
<p>(5) 编写账户持久层映射配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户 id 查询账户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUid"</span> <span class="attr">resultType</span>=<span class="string">"account"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">select * from account where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-Mybatis的缓存"><a href="#4-Mybatis的缓存" class="headerlink" title="4 Mybatis的缓存"></a>4 Mybatis的缓存</h2><h3 id="4-1-Mybatis-一级缓存"><a href="#4-1-Mybatis-一级缓存" class="headerlink" title="4.1 Mybatis 一级缓存"></a>4.1 Mybatis 一级缓存</h3><ul>
<li><p>证明一级缓存的存在<br>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。<br>(1) 编写用户持久层 Dao 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Title: IUserDao&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Description: 用户的业务层接口&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 id 查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2) 编写用户持久层映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据 id 查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"UsEr"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(3)  测试结果:<br>User user = userDao.findById(41);<br>System.out.println(“第一次查询的用户：”+user);<br>User user2 = userDao.findById(41);<br>System.out.println(“第二次查询用户：”+user2);<br>System.out.println(user == user2);</p>
</li>
<li><p>我们可以发现，虽然在上面的代码中我们查询了两次，但最后只执行了一次数据库操作，这就是 Mybatis 提供给我们的一级缓存在起作用了。因为一级缓存的存在，导致第二次查询 id 为 41 的记录时，并没有发出 sql 语句从数据库中查询数据，而是从一级缓存中查询。</p>
</li>
<li><p>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。</p>
<h3 id="4-2-Mybatis-二级缓存"><a href="#4-2-Mybatis-二级缓存" class="headerlink" title="4.2 Mybatis 二级缓存"></a>4.2 Mybatis 二级缓存</h3></li>
<li><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p>
</li>
<li><p>首先开启 mybatis 的二级缓存。<br>sqlSession1 去查询用户信息，查询到用户信息会将查询数据存储到二级缓存中。</p>
</li>
<li><p>如果 SqlSession3 去执行相同 mapper 映射下 sql，执行 commit 提交，将会清空该 mapper 映射下的二级缓存区域的数据。</p>
</li>
<li><p>sqlSession2 去查询与 sqlSession1 相同的用户信息，首先会去缓存中找是否存在数据，如果存在直接从缓存中取出数据。</p>
<h4 id="4-2-1-二级缓存的开启与关闭"><a href="#4-2-1-二级缓存的开启与关闭" class="headerlink" title="4.2.1 二级缓存的开启与关闭"></a>4.2.1 二级缓存的开启与关闭</h4><p>(1) 在 SqlMapConfig.xml 文件开启二级缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为false 代表不开启二级缓存。</span><br></pre></td></tr></table></figure>
<p>(2) 配置相关的 Mapper 映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper的 namespace 值。</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(3) 配置 statement 上面的 useCache 属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据 id 查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">将 UserDao.xml 映射文件中的<span class="tag">&lt;<span class="name">select</span>&gt;</span>标签中设置 useCache=”true”代表当前这个 statement 要使用二级缓存，如果不使用二级缓存可以设置为 false。</span><br><span class="line">注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="5-Mybatis-注解开发"><a href="#5-Mybatis-注解开发" class="headerlink" title="5 Mybatis 注解开发"></a>5 Mybatis 注解开发</h2><ul>
<li>这几年来注解开发越来越流行，Mybatis 也可以使用注解开发方式，这样我们就可以减少编写 Mapper 映射文件了。本次我们先围绕一些基本的 CRUD 来学习，再学习复杂映射关系及延迟加载。<h3 id="5-1-mybatis-的常用注解说明"><a href="#5-1-mybatis-的常用注解说明" class="headerlink" title="5.1 mybatis 的常用注解说明"></a>5.1 mybatis 的常用注解说明</h3>@Insert:实现新增<br>@Update:实现更新<br>@Delete:实现删除<br>@Select:实现查询<br>@Result:实现结果集封装<br>@Results:可以与@Result 一起使用，封装多个结果集<br>@ResultMap:实现引用@Results 定义的封装<br>@One:实现一对一结果集封装<br>@Many:实现一对多结果集封装<br>@SelectProvider: 实现动态 SQL 映射<br>@CacheNamespace:实现注解二级缓存的使用<h3 id="5-2-注解实现简单crud操作（省略。。。）"><a href="#5-2-注解实现简单crud操作（省略。。。）" class="headerlink" title="5.2 注解实现简单crud操作（省略。。。）"></a>5.2 注解实现简单crud操作（省略。。。）</h3><h3 id="5-3-使用注解实现复杂关系映射开发"><a href="#5-3-使用注解实现复杂关系映射开发" class="headerlink" title="5.3 使用注解实现复杂关系映射开发"></a>5.3 使用注解实现复杂关系映射开发</h3>实现复杂关系映射之前我们可以在映射文件中通过配置<code>&lt;resultMap&gt;</code>来实现，在使用注解开发时我们需要借助@Results 注解，@Result 注解，@One 注解，@Many 注解。</li>
</ul>
<p>@Results 注解<br>​    代替的是标签<code>&lt;resultMap&gt;</code><br>​    该注解中可以使用单个@Result 注解，也可以使用@Result 集合<br>@Results（{@Result（），@Result（）}）或@Results（@Result（））<br>@Resutl 注解<br>​    代替了<code>&lt;id&gt;</code>标签和<code>&lt;result&gt;</code>标签<br>@Result 中 属性介绍：<br>​    id 是否是主键字段<br>​    column 数据库的列名<br>​    property 需要装配的属性名<br>​    one 需要使用的@One 注解（@Result（one=@One）（）））<br>​    many 需要使用的@Many 注解（@Result（many=@many）（）））<br>@One 注解（一对一）<br>​    代替了<code>&lt;assocation</code>&gt;标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。<br>@One 注解属性介绍：<br>​    select 指定用来多表查询的 sqlmapper<br>​    fetchType 会覆盖全局的配置参数 lazyLoadingEnabled。。<br>使用格式：<br>@Result(column=” “,property=””,one=@One(select=””))<br>@Many 注解（多对一）<br>​    代替了<code>&lt;Collection&gt;</code>标签,是是多表查询的关键，在注解中用来指定子查询返回对象集合。<br>注意：聚集元素用来处理“一对多”的关系。需要指定映射的 Java 实体类的属性，属性的 javaType<br>（一般为 ArrayList）但是注解中可以不定义；<br>使用格式：<br>@Result(property=””,column=””,many=@Many(select=””))</p>
<h4 id="5-3-1-实现步骤"><a href="#5-3-1-实现步骤" class="headerlink" title="5.3.1 实现步骤"></a>5.3.1 实现步骤</h4><p>(1) 添加 User 实体类及 Account 实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Title: User&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Description: 用户的实体类&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer userId;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> Date userBirthday;</span><br><span class="line"><span class="keyword">private</span> String userSex;</span><br><span class="line"><span class="keyword">private</span> String userAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Title: Account&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Description: 账户的实体类&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> Integer uid;</span><br><span class="line"><span class="keyword">private</span> Double money;</span><br><span class="line"><span class="comment">//多对一关系映射：从表方应该包含一个主表方的对象引用</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure>
<p>(2) 添加账户的持久层接口并使用注解配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Title: IAccountDao&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Description: 账户的持久层接口&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有账户，采用延迟加载的方式查询账户的所属用户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line"><span class="meta">@Results</span>(id=<span class="string">"accountMap"</span>,</span><br><span class="line">value= &#123;</span><br><span class="line"><span class="meta">@Result</span>(id=<span class="keyword">true</span>,column=<span class="string">"id"</span>,property=<span class="string">"id"</span>),</span><br><span class="line"><span class="meta">@Result</span>(column=<span class="string">"uid"</span>,property=<span class="string">"uid"</span>),</span><br><span class="line"><span class="meta">@Result</span>(column=<span class="string">"money"</span>,property=<span class="string">"money"</span>),</span><br><span class="line"><span class="meta">@Result</span>(column=<span class="string">"uid"</span>,</span><br><span class="line">property=<span class="string">"user"</span>,</span><br><span class="line">one=<span class="meta">@One</span>(select=<span class="string">"com.itheima.dao.IUserDao.findById"</span>,</span><br><span class="line">fetchType=FetchType.LAZY)</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Title: IUserDao&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Description: 用户的持久层接口&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="meta">@Results</span>(id=<span class="string">"userMap"</span>,</span><br><span class="line">value= &#123;</span><br><span class="line"><span class="meta">@Result</span>(id=<span class="keyword">true</span>,column=<span class="string">"id"</span>,property=<span class="string">"userId"</span>),</span><br><span class="line"><span class="meta">@Result</span>(column=<span class="string">"username"</span>,property=<span class="string">"userName"</span>),</span><br><span class="line"><span class="meta">@Result</span>(column=<span class="string">"sex"</span>,property=<span class="string">"userSex"</span>),</span><br><span class="line"><span class="meta">@Result</span>(column=<span class="string">"address"</span>,property=<span class="string">"userAddress"</span>),</span><br><span class="line"><span class="meta">@Result</span>(column=<span class="string">"birthday"</span>,property=<span class="string">"userBirthday"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 id 查询一个用户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;uid&#125; "</span>)</span><br><span class="line"><span class="meta">@ResultMap</span>(<span class="string">"userMap"</span>)</span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在持久层接口中使用注解配置二级缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Title: IUserDao&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Description: 用户的持久层接口&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@CacheNamespace</span>(blocking=<span class="keyword">true</span>)<span class="comment">//mybatis 基于注解方式实现配置二级缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>














]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Myabtis高级运用(1)</title>
    <url>/2020/04/25/Mybatis%E9%AB%98%E7%BA%A7%E8%BF%90%E7%94%A81/</url>
    <content><![CDATA[<h1 id="Mybatis高级运用-1"><a href="#Mybatis高级运用-1" class="headerlink" title="Mybatis高级运用(1)"></a>Mybatis高级运用(1)</h1><h2 id="1-Mybatis-dao-xml配置"><a href="#1-Mybatis-dao-xml配置" class="headerlink" title="1 Mybatis dao.xml配置"></a>1 Mybatis dao.xml配置</h2><h3 id="1-1parameterType参数"><a href="#1-1parameterType参数" class="headerlink" title="1.1parameterType参数"></a>1.1parameterType参数</h3><ul>
<li>SQL 语句传参，使用标签的 parameterType 属性来设定。该属性的取值可以<br>是基本类型，引用类型（例如:String 类型），还可以是实体类类型（POJO 类）。同时也可以使用实体类的包装类。而接收参数是使用#{} ${}来接收。</li>
<li>基 本 类 型 和 String 我 们 可 以 直 接 写 类 型 名 称 ， 也 可 以 使 用 包 名 . 类 名 的 方 式 ， 例 如 java.lang.String。实体类类型，目前我们只能使用全限定类名。原因就是mybatis已经为基本类型起好了别名。<a id="more"></a>
<h4 id="1-1-1-传递-pojo-包装对象-编写-QueryVo"><a href="#1-1-1-传递-pojo-包装对象-编写-QueryVo" class="headerlink" title="1.1.1 传递 pojo 包装对象 编写 QueryVo"></a>1.1.1 传递 pojo 包装对象 编写 QueryVo</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Title: QueryVo</span></span><br><span class="line"><span class="comment">* Description: 查询条件对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-1-2-编写持久层接口"><a href="#1-1-2-编写持久层接口" class="headerlink" title="1.1.2  编写持久层接口"></a>1.1.2  编写持久层接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Title: IUserDao</span></span><br><span class="line"><span class="comment">*Description: 用户的业务层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 QueryVo 中的条件查询用户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> vo</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByVo</span><span class="params">(QueryVo vo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-1-3-持久层接口的映射文件"><a href="#1-1-3-持久层接口的映射文件" class="headerlink" title="1.1.3   持久层接口的映射文件"></a>1.1.3   持久层接口的映射文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户名称模糊查询，参数变成一个 QueryVo 对象了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByVo"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.domain.User"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">parameterType</span>=<span class="string">"com.itheima.domain.QueryVo"</span>&gt;</span></span><br><span class="line">select * from user where username like #&#123;user.username&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-resultType结果类型"><a href="#1-2-resultType结果类型" class="headerlink" title="1.2 resultType结果类型"></a>1.2 resultType结果类型</h3><h4 id="1-2-1-返回结果的封装"><a href="#1-2-1-返回结果的封装" class="headerlink" title="1.2.1 返回结果的封装"></a>1.2.1 返回结果的封装</h4></li>
<li>resultType 属性可以指定结果集的类型，它支持基本类型和实体类类型。<br>我们在前面的 CRUD 案例中已经对此属性进行过应用了。<br>需要注意的是，它和 parameterType 一样，如果注册过类型别名的，可以直接使用别名。没有注册过的必须使用全限定类名。例如：我们的实体类此时必须是全限定类名（今天最后一个章节会讲解如何配置实体类的别名）</li>
<li>同时，当是实体类名称是，还有一个要求，实体类中的属性名称必须和查询语句中的列名保持一致，否则无法实现封装。但是在window下不区分大小写就能封装,而linux则不行。<h4 id="1-2-2-Dao-接口"><a href="#1-2-2-Dao-接口" class="headerlink" title="1.2.2  Dao 接口"></a>1.2.2  Dao 接口</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询总记录条数</span></span><br><span class="line"><span class="comment">* @return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-3-映射配置"><a href="#1-2-3-映射配置" class="headerlink" title="1.2.3 映射配置"></a>1.2.3 映射配置</h4><!-- 查询总记录条数 -->
<select id="findTotal" resulttype="int">
select count(*) from user;
</select>

</li>
</ul>
<h4 id="1-2-4-特殊情况"><a href="#1-2-4-特殊情况" class="headerlink" title="1.2.4 特殊情况"></a>1.2.4 特殊情况</h4><ul>
<li>修改实体类 将实体类属性名变得和数据库列名不一样</li>
<li>出现结果 User[userId=null,userSex=null….] 结果无法进行封装了</li>
<li>解决方案1:<br>修改映射配置<br>使用别名查询将查询出的名字转成实体类属性名这样就能成功封装</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.domain.User"</span>&gt;</span></span><br><span class="line">	select id as userId,username as userName,birthday as userBirthday,</span><br><span class="line">sex as userSex,address as userAddress from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果我们的查询很多，都使用别名的话写起来岂不是很麻烦，有没有别的解决办法呢？<br>请看下一小节。</li>
</ul>
<h3 id="1-3-resultMap-结果类型-为解决上述问题的更好办法"><a href="#1-3-resultMap-结果类型-为解决上述问题的更好办法" class="headerlink" title="1.3  resultMap 结果类型 为解决上述问题的更好办法"></a>1.3  resultMap 结果类型 为解决上述问题的更好办法</h3><h4 id="1-3-1-定义-resultMap"><a href="#1-3-1-定义-resultMap" class="headerlink" title="1.3.1 定义 resultMap"></a>1.3.1 定义 resultMap</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 建立 User 实体和数据库表的对应关系</span></span><br><span class="line"><span class="comment">type 属性：指定要返回的实体类的全限定类名</span></span><br><span class="line"><span class="comment">id 属性：给定一个唯一标识，是给查询 select 标签引用用的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.itheima.domain.User"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"userSex"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"userAddress"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">id 标签：用于指定主键字段</span><br><span class="line">result 标签：用于指定非主键字段</span><br><span class="line">column 属性：对应数据库列名</span><br><span class="line">property 属性：对应实体类属性名称</span><br></pre></td></tr></table></figure>
<h4 id="1-3-2-映射配置"><a href="#1-3-2-映射配置" class="headerlink" title="1.3.2  映射配置"></a>1.3.2  映射配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-SqlMapConfig-xml配置文件"><a href="#2-SqlMapConfig-xml配置文件" class="headerlink" title="2 SqlMapConfig.xml配置文件"></a>2 SqlMapConfig.xml配置文件</h2><h3 id="2-1-SqlMapConfig-xml-中配置的内容和顺序-sqlMap里面标签得按这个顺序写"><a href="#2-1-SqlMapConfig-xml-中配置的内容和顺序-sqlMap里面标签得按这个顺序写" class="headerlink" title="2.1 SqlMapConfig.xml 中配置的内容和顺序(sqlMap里面标签得按这个顺序写)"></a>2.1 SqlMapConfig.xml 中配置的内容和顺序(sqlMap里面标签得按这个顺序写)</h3><p>-properties（属性）<br>​    –property<br>-settings（全局配置参数）<br>​    –setting<br>-typeAliases（类型别名）<br>​    –typeAliase<br>​    –package<br>-typeHandlers（类型处理器）<br>-objectFactory（对象工厂）<br>-plugins（插件）<br>-environments（环境集合属性对象）<br>​    –environment（环境子属性对象）<br>​        —transactionManager（事务管理）<br>​        —dataSource（数据源）<br>​            —- property(连接参数)<br>-mappers（映射器）<br>​    –mapper<br>​    –package</p>
<h3 id="2-2-各参数详解"><a href="#2-2-各参数详解" class="headerlink" title="2.2 各参数详解"></a>2.2 各参数详解</h3><h4 id="2-2-1-properties-连接信息"><a href="#2-2-1-properties-连接信息" class="headerlink" title="2.2.1  properties (连接信息)"></a>2.2.1  properties (连接信息)</h4><h5 id="2-2-1-1-第一种配置"><a href="#2-2-1-1-第一种配置" class="headerlink" title="2.2.1.1 第一种配置"></a>2.2.1.1 第一种配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/eesy"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-1-2-第二种配置"><a href="#2-2-1-2-第二种配置" class="headerlink" title="2.2.1.2 第二种配置"></a>2.2.1.2 第二种配置</h5><p>(1) 在 classpath 下定义 db.properties 文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/eesy</span><br><span class="line"><span class="attr">jdbc.username</span>=root</span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="number">1234</span></span><br></pre></td></tr></table></figure>
<p>(2) properties 标签配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置连接数据库的信息</span></span><br><span class="line"><span class="comment">resource 属性：用于指定 properties 配置文件的位置，要求配置文件必须在类路径下</span></span><br><span class="line"><span class="comment">resource="jdbcConfig.properties"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">url 属性：</span></span><br><span class="line"><span class="comment">URL： Uniform Resource Locator 统一资源定位符</span></span><br><span class="line"><span class="comment">http://localhost:8080/mystroe/CategoryServlet URL</span></span><br><span class="line"><span class="comment">协议 主机 端口 URI</span></span><br><span class="line"><span class="comment">URI：Uniform Resource Identifier 统一资源标识符</span></span><br><span class="line"><span class="comment">/mystroe/CategoryServlet</span></span><br><span class="line"><span class="comment">它是可以在 web 应用中唯一定位一个资源的路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">url</span>=</span></span><br><span class="line"><span class="tag"><span class="attr">file:</span>///<span class="attr">D:</span>/<span class="attr">IdeaProjects</span>/<span class="attr">day02_eesy_01mybatisCRUD</span>/<span class="attr">src</span>/<span class="attr">main</span>/<span class="attr">resources</span>/<span class="attr">jdbcConfig.properties</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(3) 此时我们的 dataSource 标签就变成了引用上面的配置</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-typeAliases（类型别名）"><a href="#2-2-2-typeAliases（类型别名）" class="headerlink" title="2.2.2 typeAliases（类型别名）"></a>2.2.2 typeAliases（类型别名）</h4><p>(1) 在前面我们讲的 Mybatis 支持的默认别名，我们也可以采用自定义别名方式来开发。<br>(2)  自定义别名：<br>在 SqlMapConfig.xml 中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单个别名定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.itheima.domain.User"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itheima.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"其它包"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-2-3-mappers（映射器）"><a href="#2-2-3-mappers（映射器）" class="headerlink" title="2.2.3 mappers（映射器）"></a>2.2.3 mappers（映射器）</h4><p>(1) <mapper resource=" "><br>使用相对于类路径的资源<br>如：<mapper resource="com/itheima/dao/IUserDao.xml"> (使用注解就不需要指明xml了,所以用注解就是要下面两个)</mapper></mapper></p>
<p>(2) <mapper class=" "><br>使用 mapper 接口类路径<br>如：<mapper class="com.itheima.dao.UserDao"><br>注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。</mapper></mapper></p>
<p>(3)  <package name><br>注册指定包下的所有 mapper 接口<br>如：<package name="cn.itcast.mybatis.mapper"><br>注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。 </package></package></p>
<ul>
<li>后面两种方式都可以用来做注解配置也就是后面两种方式必须得有接口类,而且mybatis默认不需要注解扫描,因为mapper就相当于指定了扫描包路径了。<h2 id="3-Mybatis连接池技术"><a href="#3-Mybatis连接池技术" class="headerlink" title="3 Mybatis连接池技术"></a>3 Mybatis连接池技术</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>MyBatis 在初始化时，根据<code>&lt;dataSource&gt;</code>的 type 属性来创建相应类型的的数据源 DataSource，即：<br>type=”POOLED”：MyBatis 会创建 PooledDataSource 实例<br>type=”UNPOOLED” ： MyBatis 会创建 UnpooledDataSource 实例<br>type=”JNDI”：MyBatis 会从 JNDI 服务上查找 DataSource 实例，然后返回使用</li>
<li>MyBatis 是 通 过 工 厂 模 式 来 创 建 数 据 源 DataSource 对 象 的 ， MyBatis 定 义 了 抽 象 的 工 厂 接口:org.apache.ibatis.datasource.DataSourceFactory,通过其 getDataSource()方法返回数据源DataSource。</li>
</ul>
<h2 id="4-Mybatis-的事务控制"><a href="#4-Mybatis-的事务控制" class="headerlink" title="4 Mybatis 的事务控制"></a>4 Mybatis 的事务控制</h2><h3 id="jdbc事务控制"><a href="#jdbc事务控制" class="headerlink" title="jdbc事务控制"></a>jdbc事务控制</h3><p>在 JDBC 中我们可以通过手动方式将事务的提交改为手动方式，通过 setAutoCommit()方法就可以调整</p>
<h3 id="Mybatis事务控制-对setAutoCommit-封装"><a href="#Mybatis事务控制-对setAutoCommit-封装" class="headerlink" title="Mybatis事务控制(对setAutoCommit()封装)"></a>Mybatis事务控制(对setAutoCommit()封装)</h3><p>通过分析我们能够发现之前的 CUD 操作过程中，我们都要手动进行事务的提交，原因是 setAutoCommit()方法，在执行时它的值被设置为 false 了，所以我们在 CUD 操作中，<br>必须通过 sqlSession.commit()方法来执行提交操作。</p>
<h3 id="Mybatis-自动提交事务的设置"><a href="#Mybatis-自动提交事务的设置" class="headerlink" title="Mybatis 自动提交事务的设置"></a>Mybatis 自动提交事务的设置</h3><p>通过上面的研究和分析，现在我们一起思考，为什么 CUD 过程中必须使用 sqlSession.commit()提交事务？主要原因就是在连接池中取出的连接，都会将调用 connection.setAutoCommit(false)方法，这样我们就必须使用 sqlSession.commit()方法，相当于使用了 JDBC 中的 connection.commit()方法实现事务提交。<br>明白这一点后，我们现在一起尝试不进行手动提交，一样实现 CUD 操作。<br>** session = factory.openSession(true);**</p>
<h2 id="5-Mybatis-的动态-SQL-语句"><a href="#5-Mybatis-的动态-SQL-语句" class="headerlink" title="5  Mybatis 的动态 SQL 语句"></a>5  Mybatis 的动态 SQL 语句</h2><p>Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL 是动态变化的，此时在前面的学习中我们的 SQL 就不能满足要求了。</p>
<h3 id="5-1-动态-SQL-之-lt-if-gt-标签"><a href="#5-1-动态-SQL-之-lt-if-gt-标签" class="headerlink" title="5.1 动态 SQL 之&lt;if&gt;标签"></a>5.1 动态 SQL 之<code>&lt;if&gt;</code>标签</h3><p>(1) 持久层 Dao 接口</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 根据用户信息，查询用户列表</span><br><span class="line">* @param user</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">List<span class="tag">&lt;User&gt;</span> findByUser(<span class="keyword">User</span> <span class="title">user</span>);</span><br></pre></td></tr></table></figure>
<p>(2) 持久层 Dao 映射配置<br><select id="findByUser" resulttype="user" parametertype="user"><br>    select * from user where 1=1<br>    <if test="username!=null and username != '' "><br>    and username like #{username}<br>    </if><br>    <if test="address != null"><br>    and address like #{address}<br>    </if><br></select><br>注意：<code>&lt;if&gt;</code>标签的 test 属性中写的是对象的属性名，如果是包装类的对象要使用 OGNL 表达式的写法。<br>另外要注意 where 1=1 的作用~！</p>
<h3 id="5-2-动态-SQL-之-lt-where-gt-标签"><a href="#5-2-动态-SQL-之-lt-where-gt-标签" class="headerlink" title="5.2 动态 SQL 之&lt;where&gt;标签"></a>5.2 动态 SQL 之<code>&lt;where&gt;</code>标签</h3><p>(1) 为了简化上面 where 1=1 的条件拼装，我们可以采用<code>&lt;where&gt;</code>标签来简化开发。<br>(2) </p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 根据用户信息查询 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultSql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>(调用sql语句)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null and username != '' "</span>&gt;</span></span></span><br><span class="line"><span class="xml">	and username like #</span><span class="template-variable">&#123;username&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	and address like #</span><span class="template-variable">&#123;address&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="5-3-动态标签之-lt-foreach-gt-标签"><a href="#5-3-动态标签之-lt-foreach-gt-标签" class="headerlink" title="5.3 动态标签之&lt;foreach&gt;标签"></a>5.3 动态标签之<code>&lt;foreach&gt;</code>标签</h3><p>(1) 需求<br>传入多个 id 查询用户信息，用下边两个 sql 实现：<br>SELECT * FROM USERS WHERE username LIKE ‘%张%’ AND (id =10 OR id =89 OR id=16)<br>SELECT * FROM USERS WHERE username LIKE ‘%张%’ AND id IN (10,89,16)<br>这样我们在进行范围查询时，就要将一个集合中的值，作为参数动态添加进来。<br>这样我们将如何进行参数的传递？</p>
<p>(2) 在 QueryVo 中加入一个 List 集合用于封装参数</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Title: QueryVo</span></span><br><span class="line"><span class="comment">* Description: 查询的条件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">QueryVo</span> <span class="symbol">implements</span> <span class="symbol">Serializable</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(3) 持久层 Dao 接口</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>根据 id 集合查询用户</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@param vo</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line"><span class="built_in">List</span>&lt;User&gt; findInIds(QueryVo vo);</span><br></pre></td></tr></table></figure>
<p>(4) 持久层 Dao 映射配置</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 查询所有用户在 id 的集合之中 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findInIds"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"queryvo"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- select * from user where id in  --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultSql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids != null and ids.size() &gt; 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">open</span>=<span class="string">"id in ( "</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"uid"</span></span></span></span><br><span class="line"><span class="xml">	separator=","&gt;</span></span><br><span class="line"><span class="xml">	#</span><span class="template-variable">&#123;uid&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>SQL 语句：<br>select 字段 from user where id in (?)<br><code>&lt;foreach&gt;</code>标签用于遍历集合，它的属性：<br>collection:代表要遍历的集合元素，注意编写时不要写#{}<br>open:代表语句的开始部分<br>close:代表结束部分<br>item:代表遍历集合的每个元素，生成的变量名<br>sperator:代表分隔符</p>
<h2 id="6-Mybatis-中简化编写的-SQL-片段"><a href="#6-Mybatis-中简化编写的-SQL-片段" class="headerlink" title="6 Mybatis 中简化编写的 SQL 片段"></a>6 Mybatis 中简化编写的 SQL 片段</h2><p>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的<br>(1) 定义代码片段</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 抽取重复的语句代码片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"defaultSql"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(2)  引用代码片段</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultSql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 根据 id 查询 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"UsEr"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultSql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">where id = #</span><span class="template-variable">&#123;uid&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
</search>
